{"version":3,"sources":["Color.js","App.js","index.js"],"names":["getRandomColor","letters","split","color","i","Math","round","random","useStyles","makeStyles","backgroundContainer","background","backgroundSize","minWidth","minHeight","width","height","border","boxSizing","button","borderRadius","boxShadow","padding","marginLeft","quoteBox","display","flexFlow","margin","text","quoteIcon","fontSize","author","alignSelf","buttonContainer","justifyContent","marginTop","tweetQuote","githubIcon","App","classes","useState","data","setData","inProp","setInProp","useEffect","fetch","headers","Accept","then","response","json","myJson","catch","err","console","log","length","quotes","quoteIndex","quote","CSSTransition","in","timeout","classNames","Container","id","className","style","backgroundColor","Typography","variant","target","href","Button","onClick","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.342525da.chunk.js","sourcesContent":["function getRandomColor() {\n  var letters = '0123456789ABCD'.split('')\n  var color = '#'\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.round(Math.random() * 13)]\n  }\n  return color\n}\n\nexport default getRandomColor\n","import React, { useState, useEffect } from 'react'\nimport './styles.css'\n\nimport { Button, Container, Typography } from '@material-ui/core'\nimport TwitterIcon from '@material-ui/icons/Twitter'\nimport FormatQuoteIcon from '@material-ui/icons/FormatQuote'\nimport GitHubIcon from '@material-ui/icons/GitHub'\n\nimport getRandomColor from './Color'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { CSSTransition } from 'react-transition-group'\n\nconst useStyles = makeStyles({\n  backgroundContainer: {\n    background: `${getRandomColor()} no-repeat center center fixed`,\n    backgroundSize: 'cover',\n    minWidth: '100%',\n    minHeight: '100%',\n    width: '100%',\n    height: '100%',\n    border: `1px solid transparent`,\n    boxSizing: 'border-box',\n  },\n  button: {\n    border: 0,\n    borderRadius: '5px',\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n    marginLeft: 'auto',\n  },\n  quoteBox: {\n    display: 'flex',\n    flexFlow: 'column wrap',\n    margin: '20% auto',\n    width: '50%',\n    height: '40%',\n    border: '1px solid white',\n    borderRadius: '10px',\n    background: 'white',\n    padding: '40px 20px',\n  },\n  text: {},\n  quoteIcon: {\n    fontSize: 70,\n    height: 48,\n  },\n  author: {\n    alignSelf: 'flex-end',\n  },\n  buttonContainer: {\n    display: 'flex',\n    flexFlow: 'row nowrap',\n    justifyContent: 'space-between',\n    border: '1px solid white',\n    minHeight: 48,\n    margin: 0,\n    padding: 0,\n    marginTop: 30,\n  },\n  tweetQuote: {\n    width: 20,\n    borderRadius: '5px',\n    padding: '0 20px',\n    color: 'white',\n  },\n  githubIcon: {\n    width: 20,\n    borderRadius: '5px',\n    padding: '0 20px',\n    color: 'white',\n    marginLeft: '10px',\n  },\n})\n\nfunction App() {\n  const classes = useStyles()\n  const [data, setData] = useState([])\n  const [inProp, setInProp] = useState(false)\n  const getData = () => {\n    fetch('quotes.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    })\n      .then((response) => response.json())\n      .then((myJson) => setData(myJson))\n      .catch((err) => console.log(err))\n  }\n  useEffect(() => {\n    getData()\n  }, [])\n  const color = getRandomColor()\n  const length = data && data.quotes && data.quotes.length\n  const quoteIndex = Math.round(Math.random() * length) - 1\n  const text = data && data.quotes && quoteIndex && data.quotes[quoteIndex].quote\n  const author = data && data.quotes && quoteIndex && data.quotes[quoteIndex].author\n  const handleClick = () => {\n    setInProp((prevState) => !prevState)\n  }\n  return (\n    <CSSTransition in={inProp} timeout={2000} classNames='my-node'>\n      <Container\n        id='background-container'\n        className={classes.backgroundContainer}\n        style={{ backgroundColor: `${color}` }}\n      >\n        <Container id='quote-box' className={classes.quoteBox}>\n          <Typography id='text' variant='h4' style={{ color: `${color}` }}>\n            <FormatQuoteIcon className={classes.quoteIcon}></FormatQuoteIcon>\n            {text}\n          </Typography>\n          <Typography id='author' variant='h6' className={classes.author} style={{ color: `${color}` }}>\n            {author}\n          </Typography>\n          <Container id='button-container' className={classes.buttonContainer}>\n            <a\n              id='tweet-quote'\n              className={classes.tweetQuote}\n              target='_top'\n              href='https://www.twitter.com/intent/tweet'\n              style={{ backgroundColor: `${color}` }}\n            >\n              <TwitterIcon></TwitterIcon>\n            </a>\n            <a\n              id='github-link'\n              className={classes.githubIcon}\n              target='_top'\n              href='https://github.com/OnurSeckiN'\n              style={{ backgroundColor: `${color}` }}\n            >\n              <GitHubIcon></GitHubIcon>\n            </a>\n            <Button\n              id='new-quote'\n              onClick={handleClick}\n              className={classes.button}\n              variant='contained'\n              style={{ backgroundColor: `${color}` }}\n            >\n              New Quote\n            </Button>\n          </Container>\n        </Container>\n      </Container>\n    </CSSTransition>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}